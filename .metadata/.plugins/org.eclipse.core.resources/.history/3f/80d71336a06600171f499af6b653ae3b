package com.chinasofti.eecuser.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;

import com.chinasofti.eecuser.model.javabean.ClassInfo;
import com.chinasofti.eecuser.model.javabean.SqlDataPage;
import com.chinasofti.eecuser.model.javabean.UserInfo;
import com.chinasofti.eecuser.model.service.AdminClassServiceImp;
import com.chinasofti.eecuser.model.service.AdminTheacherServiceImp;
import com.chinasofti.eecuser.model.service.IAdminClassService;
import com.chinasofti.eecuser.model.service.IAdminTheacherService;

/**
 * Servlet implementation class AdminServlet
 */
@WebServlet("/AdminServlet")
public class AdminServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private HashMap<String, String> queryConf;
	
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AdminServlet() {
    	queryConf = new HashMap<String, String>();
    	queryConf.put("sessionPageMapAttr", "sqlPageMap");
    	queryConf.put("teacherAllPage", "teacherAllPage");
    	queryConf.put("queryDefaultMode", "first");
    }
    
    public void getPageMode(String pageMode, SqlDataPage pageObj){
    	int needPage = 0;
    	switch (pageMode) {
		case "first":
			needPage = 1;
			break;
		case "pre":
			needPage = pageObj.getCurrentPage() -1;
			break;
		case "next":
			needPage = pageObj.getCurrentPage() +1;
			break;
		case "last":
			needPage = pageObj.getMaxPageIndex();
			break;
		default:
			try{
				needPage = Integer.parseInt(pageMode);
    		}catch(NumberFormatException e){
    			System.out.println("传入指定页参数有问题，跳入首页");
    			pageObj.getCustomPage(1);
    		}
			break;
		}
    	pageObj.getCustomPage(needPage);
    }
    
	
    
    // 分页获取和更新页码，并将更新后的页码存入MAP
    // currentPage 设置首次运行的 当前页面
 	// pageMaxRows 设置页面最大的显示行数
    
    private void queryDate(HttpServletRequest request, HttpServletResponse response) throws IOException{
		
		// 其他需要的参数
		PrintWriter out = response.getWriter();
		IAdminTheacherService adminTheacherService = new AdminTheacherServiceImp();
		
		List<UserInfo> userList = adminTheacherService.queryDataByCondition
				(roleId, classId, id, name, sqlPageHashSet.get(sqlPageMapKey));
		request.getSession().setAttribute("sqlPageMap", sqlPageHashSet);
    }
    
    
    private SqlDataPage getPageSpliteObj(HashMap<String,SqlDataPage> sqlPageHashSet, 
    		String sqlPageMapKey
    		){
    	SqlDataPage pageObj = (SqlDataPage)sqlPageHashSet.get(sqlPageMapKey);
    	if(pageObj == null){
    		pageObj = new SqlDataPage();
		}
    	return pageObj;
    }
    
    private void setPageSpliteObj(HashMap<String,SqlDataPage> sqlPageHashSet, 
    		String sqlPageMapKey,
    		SqlDataPage pageObj
    		){
    	sqlPageHashSet.put(sqlPageMapKey, pageObj);
    }
    
    private void initPageSpliteObj(int currentPage, int pageMaxRows, SqlDataPage pageObj){
    	pageObj.setCurrentPage(currentPage); 
    	pageObj.setPageMaxRows(pageMaxRows);
    }
    
    private HashMap<String,SqlDataPage> getSessionPageMap(HttpSession session){
    	HashMap<String,SqlDataPage> sqlPageHashSet  = (HashMap<String,SqlDataPage>)
				session.getAttribute(queryConf.get("sessionPageMapAttr")); // TODO这里使用变量去替代
		if(sqlPageHashSet == null){
			sqlPageHashSet = new HashMap<String,SqlDataPage>();
		}
		return sqlPageHashSet;
    }
    
    private void putSessionPageMap(HttpSession session, HashMap<String,SqlDataPage> sqlPageHashSet){
    	session.setAttribute(queryConf.get("sessionPageMapAttr"), sqlPageHashSet);
    }
    
    private void mableNeed(HttpServletRequest request){
    	int currentPage;
    	int pageMaxRows;	
    	try{
    		currentPage 	= 	Integer.parseInt(request.getParameter("currentPage"));
    		pageMaxRows 	= 	Integer.parseInt(request.getParameter("pageMaxRows"));
		}catch(NumberFormatException E){
			System.out.println("参数格式不对");
		}
    }

    
    
//    private HashMap<String,String> getReqParam(HttpServletRequest request){
//    	HashMap<String,String> 
//    	String sqlPageMapKey = request.getParameter("sqlPageMapKey");
//    	
//    }
    
    private HashMap<String,String> gotoTeacherManageDefaultParam(){
    	HashMap<String,String> defaultData = new HashMap<String,String>();
    	
    	return defaultData;
    }
    
    private void gotoTeacherManage(HttpServletRequest request, HttpServletResponse response) throws IOException{
    	
    	String sqlPageMapKey = request.getParameter("sqlPageMapKey");
    	int currentPage = 1;
    	int pageMaxRows = 3;	
    	PrintWriter out = response.getWriter();
    	// 获取存储在session中 存储所有分页对象的Map对象
    	HashMap<String,SqlDataPage> sqlPageHashSet = getSessionPageMap(request.getSession());
    	// 获取存储在分页Map中当前需要的分页对象
    	SqlDataPage pageObj = getPageSpliteObj(sqlPageHashSet, sqlPageMapKey);
    	// pageObj初始化， 初始化每页最大显示行数和首次的页码
    	initPageSpliteObj(1, 3, pageObj);
    	
		IAdminTheacherService adminTheacherService = new AdminTheacherServiceImp();
		List<UserInfo> userList = adminTheacherService.queryDataByCondition
				(roleId, classId, id, name, sqlPageHashSet.get(sqlPageMapKey));
		// 后面这两步是不是不需要？， 因为对象本来就存在与session中
		setPageSpliteObj(sqlPageHashSet, sqlPageMapKey, pageObj);
		putSessionPageMap(request.getSession(), sqlPageHashSet);
		// 将数据写入
		request.getSession().setAttribute("teacherAllData", userList);
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String action 		= 	request.getParameter("action");
		PrintWriter out 	= 	response.getWriter();
		// 按需请求
		if(action.equals("gotoTeacherManage")){ // 请求有效班级数量
			
		}else if(action.equals("getQueryTheacher")){
			queryDate(request, response);
		}else if(action.equals("errorReq")){
			out.write("[]");
		}else{ 
			out.write("[]");
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
